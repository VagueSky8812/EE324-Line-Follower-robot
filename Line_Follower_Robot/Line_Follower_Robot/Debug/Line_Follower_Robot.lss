
Line_Follower_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000011fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  00800060  00800060  000011fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fb  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  0000255b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a33  00000000  00000000  00002c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  0000369c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  00003890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000804  00000000  00000000  00003e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 3b       	cpi	r26, 0xBE	; 190
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 aa 02 	call	0x554	; 0x554 <main>
      74:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <lcd_set_4bit>:
  motion_set(0b00000000);
}

void soft_stop (void)       //soft stop(stops slowly)
{
  motion_set(0b00000000);
      7c:	89 ef       	ldi	r24, 0xF9	; 249
      7e:	90 e0       	ldi	r25, 0x00	; 0
      80:	01 97       	sbiw	r24, 0x01	; 1
      82:	f1 f7       	brne	.-4      	; 0x80 <lcd_set_4bit+0x4>
      84:	00 c0       	rjmp	.+0      	; 0x86 <lcd_set_4bit+0xa>
      86:	00 00       	nop
      88:	85 b3       	in	r24, 0x15	; 21
      8a:	8e 7f       	andi	r24, 0xFE	; 254
      8c:	85 bb       	out	0x15, r24	; 21
      8e:	85 b3       	in	r24, 0x15	; 21
      90:	8d 7f       	andi	r24, 0xFD	; 253
      92:	85 bb       	out	0x15, r24	; 21
      94:	80 e3       	ldi	r24, 0x30	; 48
      96:	85 bb       	out	0x15, r24	; 21
      98:	95 b3       	in	r25, 0x15	; 21
      9a:	94 60       	ori	r25, 0x04	; 4
      9c:	95 bb       	out	0x15, r25	; 21
      9e:	e1 ee       	ldi	r30, 0xE1	; 225
      a0:	f4 e0       	ldi	r31, 0x04	; 4
      a2:	31 97       	sbiw	r30, 0x01	; 1
      a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_set_4bit+0x26>
      a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_set_4bit+0x2c>
      a8:	00 00       	nop
      aa:	95 b3       	in	r25, 0x15	; 21
      ac:	9b 7f       	andi	r25, 0xFB	; 251
      ae:	95 bb       	out	0x15, r25	; 21
      b0:	e9 ef       	ldi	r30, 0xF9	; 249
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	31 97       	sbiw	r30, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x38>
      b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_set_4bit+0x3e>
      ba:	00 00       	nop
      bc:	95 b3       	in	r25, 0x15	; 21
      be:	9e 7f       	andi	r25, 0xFE	; 254
      c0:	95 bb       	out	0x15, r25	; 21
      c2:	95 b3       	in	r25, 0x15	; 21
      c4:	9d 7f       	andi	r25, 0xFD	; 253
      c6:	95 bb       	out	0x15, r25	; 21
      c8:	85 bb       	out	0x15, r24	; 21
      ca:	95 b3       	in	r25, 0x15	; 21
      cc:	94 60       	ori	r25, 0x04	; 4
      ce:	95 bb       	out	0x15, r25	; 21
      d0:	e1 ee       	ldi	r30, 0xE1	; 225
      d2:	f4 e0       	ldi	r31, 0x04	; 4
      d4:	31 97       	sbiw	r30, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_set_4bit+0x58>
      d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_set_4bit+0x5e>
      da:	00 00       	nop
      dc:	95 b3       	in	r25, 0x15	; 21
      de:	9b 7f       	andi	r25, 0xFB	; 251
      e0:	95 bb       	out	0x15, r25	; 21
      e2:	e9 ef       	ldi	r30, 0xF9	; 249
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	31 97       	sbiw	r30, 0x01	; 1
      e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_set_4bit+0x6a>
      ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_set_4bit+0x70>
      ec:	00 00       	nop
      ee:	95 b3       	in	r25, 0x15	; 21
      f0:	9e 7f       	andi	r25, 0xFE	; 254
      f2:	95 bb       	out	0x15, r25	; 21
      f4:	95 b3       	in	r25, 0x15	; 21
      f6:	9d 7f       	andi	r25, 0xFD	; 253
      f8:	95 bb       	out	0x15, r25	; 21
      fa:	85 bb       	out	0x15, r24	; 21
      fc:	85 b3       	in	r24, 0x15	; 21
      fe:	84 60       	ori	r24, 0x04	; 4
     100:	85 bb       	out	0x15, r24	; 21
     102:	81 ee       	ldi	r24, 0xE1	; 225
     104:	94 e0       	ldi	r25, 0x04	; 4
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <lcd_set_4bit+0x8a>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_set_4bit+0x90>
     10c:	00 00       	nop
     10e:	85 b3       	in	r24, 0x15	; 21
     110:	8b 7f       	andi	r24, 0xFB	; 251
     112:	85 bb       	out	0x15, r24	; 21
     114:	e9 ef       	ldi	r30, 0xF9	; 249
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	31 97       	sbiw	r30, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_set_4bit+0x9c>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_set_4bit+0xa2>
     11e:	00 00       	nop
     120:	85 b3       	in	r24, 0x15	; 21
     122:	8e 7f       	andi	r24, 0xFE	; 254
     124:	85 bb       	out	0x15, r24	; 21
     126:	85 b3       	in	r24, 0x15	; 21
     128:	8d 7f       	andi	r24, 0xFD	; 253
     12a:	85 bb       	out	0x15, r24	; 21
     12c:	80 e2       	ldi	r24, 0x20	; 32
     12e:	85 bb       	out	0x15, r24	; 21
     130:	85 b3       	in	r24, 0x15	; 21
     132:	84 60       	ori	r24, 0x04	; 4
     134:	85 bb       	out	0x15, r24	; 21
     136:	81 ee       	ldi	r24, 0xE1	; 225
     138:	94 e0       	ldi	r25, 0x04	; 4
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_set_4bit+0xbe>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_set_4bit+0xc4>
     140:	00 00       	nop
     142:	85 b3       	in	r24, 0x15	; 21
     144:	8b 7f       	andi	r24, 0xFB	; 251
     146:	85 bb       	out	0x15, r24	; 21
     148:	08 95       	ret

0000014a <lcd_wr_command>:
     14a:	38 2f       	mov	r19, r24
     14c:	30 7f       	andi	r19, 0xF0	; 240
     14e:	25 b3       	in	r18, 0x15	; 21
     150:	2f 70       	andi	r18, 0x0F	; 15
     152:	25 bb       	out	0x15, r18	; 21
     154:	95 b3       	in	r25, 0x15	; 21
     156:	93 2b       	or	r25, r19
     158:	95 bb       	out	0x15, r25	; 21
     15a:	95 b3       	in	r25, 0x15	; 21
     15c:	9e 7f       	andi	r25, 0xFE	; 254
     15e:	95 bb       	out	0x15, r25	; 21
     160:	95 b3       	in	r25, 0x15	; 21
     162:	9d 7f       	andi	r25, 0xFD	; 253
     164:	95 bb       	out	0x15, r25	; 21
     166:	95 b3       	in	r25, 0x15	; 21
     168:	94 60       	ori	r25, 0x04	; 4
     16a:	95 bb       	out	0x15, r25	; 21
     16c:	e1 ee       	ldi	r30, 0xE1	; 225
     16e:	f4 e0       	ldi	r31, 0x04	; 4
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_wr_command+0x26>
     174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_wr_command+0x2c>
     176:	00 00       	nop
     178:	95 b3       	in	r25, 0x15	; 21
     17a:	9b 7f       	andi	r25, 0xFB	; 251
     17c:	95 bb       	out	0x15, r25	; 21
     17e:	82 95       	swap	r24
     180:	80 7f       	andi	r24, 0xF0	; 240
     182:	95 b3       	in	r25, 0x15	; 21
     184:	9f 70       	andi	r25, 0x0F	; 15
     186:	95 bb       	out	0x15, r25	; 21
     188:	95 b3       	in	r25, 0x15	; 21
     18a:	89 2b       	or	r24, r25
     18c:	85 bb       	out	0x15, r24	; 21
     18e:	85 b3       	in	r24, 0x15	; 21
     190:	8e 7f       	andi	r24, 0xFE	; 254
     192:	85 bb       	out	0x15, r24	; 21
     194:	85 b3       	in	r24, 0x15	; 21
     196:	8d 7f       	andi	r24, 0xFD	; 253
     198:	85 bb       	out	0x15, r24	; 21
     19a:	85 b3       	in	r24, 0x15	; 21
     19c:	84 60       	ori	r24, 0x04	; 4
     19e:	85 bb       	out	0x15, r24	; 21
     1a0:	81 ee       	ldi	r24, 0xE1	; 225
     1a2:	94 e0       	ldi	r25, 0x04	; 4
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_wr_command+0x5a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_wr_command+0x60>
     1aa:	00 00       	nop
     1ac:	85 b3       	in	r24, 0x15	; 21
     1ae:	8b 7f       	andi	r24, 0xFB	; 251
     1b0:	85 bb       	out	0x15, r24	; 21
     1b2:	08 95       	ret

000001b4 <lcd_init>:
     1b4:	89 ef       	ldi	r24, 0xF9	; 249
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x4>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_init+0xa>
     1be:	00 00       	nop
     1c0:	88 e2       	ldi	r24, 0x28	; 40
     1c2:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     1d2:	8e e0       	ldi	r24, 0x0E	; 14
     1d4:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     1d8:	80 e8       	ldi	r24, 0x80	; 128
     1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     1de:	08 95       	ret

000001e0 <lcd_wr_char>:
     1e0:	38 2f       	mov	r19, r24
     1e2:	30 7f       	andi	r19, 0xF0	; 240
     1e4:	25 b3       	in	r18, 0x15	; 21
     1e6:	2f 70       	andi	r18, 0x0F	; 15
     1e8:	25 bb       	out	0x15, r18	; 21
     1ea:	95 b3       	in	r25, 0x15	; 21
     1ec:	93 2b       	or	r25, r19
     1ee:	95 bb       	out	0x15, r25	; 21
     1f0:	95 b3       	in	r25, 0x15	; 21
     1f2:	91 60       	ori	r25, 0x01	; 1
     1f4:	95 bb       	out	0x15, r25	; 21
     1f6:	95 b3       	in	r25, 0x15	; 21
     1f8:	9d 7f       	andi	r25, 0xFD	; 253
     1fa:	95 bb       	out	0x15, r25	; 21
     1fc:	95 b3       	in	r25, 0x15	; 21
     1fe:	94 60       	ori	r25, 0x04	; 4
     200:	95 bb       	out	0x15, r25	; 21
     202:	e1 ee       	ldi	r30, 0xE1	; 225
     204:	f4 e0       	ldi	r31, 0x04	; 4
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
     20c:	00 00       	nop
     20e:	95 b3       	in	r25, 0x15	; 21
     210:	9b 7f       	andi	r25, 0xFB	; 251
     212:	95 bb       	out	0x15, r25	; 21
     214:	82 95       	swap	r24
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	95 b3       	in	r25, 0x15	; 21
     21a:	9f 70       	andi	r25, 0x0F	; 15
     21c:	95 bb       	out	0x15, r25	; 21
     21e:	95 b3       	in	r25, 0x15	; 21
     220:	89 2b       	or	r24, r25
     222:	85 bb       	out	0x15, r24	; 21
     224:	85 b3       	in	r24, 0x15	; 21
     226:	81 60       	ori	r24, 0x01	; 1
     228:	85 bb       	out	0x15, r24	; 21
     22a:	85 b3       	in	r24, 0x15	; 21
     22c:	8d 7f       	andi	r24, 0xFD	; 253
     22e:	85 bb       	out	0x15, r24	; 21
     230:	85 b3       	in	r24, 0x15	; 21
     232:	84 60       	ori	r24, 0x04	; 4
     234:	85 bb       	out	0x15, r24	; 21
     236:	81 ee       	ldi	r24, 0xE1	; 225
     238:	94 e0       	ldi	r25, 0x04	; 4
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
     240:	00 00       	nop
     242:	85 b3       	in	r24, 0x15	; 21
     244:	8b 7f       	andi	r24, 0xFB	; 251
     246:	85 bb       	out	0x15, r24	; 21
     248:	08 95       	ret

0000024a <lcd_home>:
     24a:	80 e8       	ldi	r24, 0x80	; 128
     24c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     250:	08 95       	ret

00000252 <lcd_cursor>:
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	71 f0       	breq	.+28     	; 0x272 <lcd_cursor+0x20>
     256:	18 f4       	brcc	.+6      	; 0x25e <lcd_cursor+0xc>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	31 f0       	breq	.+12     	; 0x268 <lcd_cursor+0x16>
     25c:	08 95       	ret
     25e:	83 30       	cpi	r24, 0x03	; 3
     260:	69 f0       	breq	.+26     	; 0x27c <lcd_cursor+0x2a>
     262:	84 30       	cpi	r24, 0x04	; 4
     264:	81 f0       	breq	.+32     	; 0x286 <lcd_cursor+0x34>
     266:	08 95       	ret
     268:	8f e7       	ldi	r24, 0x7F	; 127
     26a:	86 0f       	add	r24, r22
     26c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     270:	08 95       	ret
     272:	8f eb       	ldi	r24, 0xBF	; 191
     274:	86 0f       	add	r24, r22
     276:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     27a:	08 95       	ret
     27c:	83 e9       	ldi	r24, 0x93	; 147
     27e:	86 0f       	add	r24, r22
     280:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     284:	08 95       	ret
     286:	83 ed       	ldi	r24, 0xD3	; 211
     288:	86 0f       	add	r24, r22
     28a:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_command>
     28e:	08 95       	ret

00000290 <lcd_print>:
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	8a 01       	movw	r16, r20
     29a:	e9 01       	movw	r28, r18
     29c:	88 23       	and	r24, r24
     29e:	11 f0       	breq	.+4      	; 0x2a4 <lcd_print+0x14>
     2a0:	61 11       	cpse	r22, r1
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <lcd_print+0x1a>
     2a4:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_home>
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <lcd_print+0x1e>
     2aa:	0e 94 29 01 	call	0x252	; 0x252 <lcd_cursor>
     2ae:	c5 30       	cpi	r28, 0x05	; 5
     2b0:	d1 05       	cpc	r29, r1
     2b2:	d1 f4       	brne	.+52     	; 0x2e8 <lcd_print+0x58>
     2b4:	98 01       	movw	r18, r16
     2b6:	32 95       	swap	r19
     2b8:	22 95       	swap	r18
     2ba:	2f 70       	andi	r18, 0x0F	; 15
     2bc:	23 27       	eor	r18, r19
     2be:	3f 70       	andi	r19, 0x0F	; 15
     2c0:	23 27       	eor	r18, r19
     2c2:	a7 e4       	ldi	r26, 0x47	; 71
     2c4:	b3 e0       	ldi	r27, 0x03	; 3
     2c6:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     2ca:	96 95       	lsr	r25
     2cc:	87 95       	ror	r24
     2ce:	96 95       	lsr	r25
     2d0:	87 95       	ror	r24
     2d2:	96 95       	lsr	r25
     2d4:	87 95       	ror	r24
     2d6:	c0 96       	adiw	r24, 0x30	; 48
     2d8:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <million+0x1>
     2dc:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <million>
     2e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <lcd_print+0x5a>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	c4 30       	cpi	r28, 0x04	; 4
     2ec:	d1 05       	cpc	r29, r1
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <lcd_print+0x64>
     2f0:	81 30       	cpi	r24, 0x01	; 1
     2f2:	c1 f5       	brne	.+112    	; 0x364 <lcd_print+0xd4>
     2f4:	98 01       	movw	r18, r16
     2f6:	36 95       	lsr	r19
     2f8:	27 95       	ror	r18
     2fa:	36 95       	lsr	r19
     2fc:	27 95       	ror	r18
     2fe:	36 95       	lsr	r19
     300:	27 95       	ror	r18
     302:	a5 ec       	ldi	r26, 0xC5	; 197
     304:	b0 e2       	ldi	r27, 0x20	; 32
     306:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     30a:	ac 01       	movw	r20, r24
     30c:	52 95       	swap	r21
     30e:	42 95       	swap	r20
     310:	4f 70       	andi	r20, 0x0F	; 15
     312:	45 27       	eor	r20, r21
     314:	5f 70       	andi	r21, 0x0F	; 15
     316:	45 27       	eor	r20, r21
     318:	50 93 a2 00 	sts	0x00A2, r21	; 0x8000a2 <temp+0x1>
     31c:	40 93 a1 00 	sts	0x00A1, r20	; 0x8000a1 <temp>
     320:	9a 01       	movw	r18, r20
     322:	ad ec       	ldi	r26, 0xCD	; 205
     324:	bc ec       	ldi	r27, 0xCC	; 204
     326:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
     332:	96 95       	lsr	r25
     334:	87 95       	ror	r24
     336:	9c 01       	movw	r18, r24
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	9a 01       	movw	r18, r20
     34e:	28 1b       	sub	r18, r24
     350:	39 0b       	sbc	r19, r25
     352:	c9 01       	movw	r24, r18
     354:	c0 96       	adiw	r24, 0x30	; 48
     356:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <thousand+0x1>
     35a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <thousand>
     35e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	c3 30       	cpi	r28, 0x03	; 3
     366:	d1 05       	cpc	r29, r1
     368:	11 f0       	breq	.+4      	; 0x36e <lcd_print+0xde>
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	91 f5       	brne	.+100    	; 0x3d2 <lcd_print+0x142>
     36e:	98 01       	movw	r18, r16
     370:	36 95       	lsr	r19
     372:	27 95       	ror	r18
     374:	36 95       	lsr	r19
     376:	27 95       	ror	r18
     378:	ab e7       	ldi	r26, 0x7B	; 123
     37a:	b4 e1       	ldi	r27, 0x14	; 20
     37c:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     380:	ac 01       	movw	r20, r24
     382:	56 95       	lsr	r21
     384:	47 95       	ror	r20
     386:	50 93 a2 00 	sts	0x00A2, r21	; 0x8000a2 <temp+0x1>
     38a:	40 93 a1 00 	sts	0x00A1, r20	; 0x8000a1 <temp>
     38e:	9a 01       	movw	r18, r20
     390:	ad ec       	ldi	r26, 0xCD	; 205
     392:	bc ec       	ldi	r27, 0xCC	; 204
     394:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     398:	96 95       	lsr	r25
     39a:	87 95       	ror	r24
     39c:	96 95       	lsr	r25
     39e:	87 95       	ror	r24
     3a0:	96 95       	lsr	r25
     3a2:	87 95       	ror	r24
     3a4:	9c 01       	movw	r18, r24
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	82 0f       	add	r24, r18
     3b8:	93 1f       	adc	r25, r19
     3ba:	9a 01       	movw	r18, r20
     3bc:	28 1b       	sub	r18, r24
     3be:	39 0b       	sbc	r19, r25
     3c0:	c9 01       	movw	r24, r18
     3c2:	c0 96       	adiw	r24, 0x30	; 48
     3c4:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <hundred+0x1>
     3c8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <hundred>
     3cc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	c2 30       	cpi	r28, 0x02	; 2
     3d4:	d1 05       	cpc	r29, r1
     3d6:	11 f0       	breq	.+4      	; 0x3dc <lcd_print+0x14c>
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	81 f5       	brne	.+96     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
     3dc:	98 01       	movw	r18, r16
     3de:	ad ec       	ldi	r26, 0xCD	; 205
     3e0:	bc ec       	ldi	r27, 0xCC	; 204
     3e2:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     3e6:	ac 01       	movw	r20, r24
     3e8:	56 95       	lsr	r21
     3ea:	47 95       	ror	r20
     3ec:	56 95       	lsr	r21
     3ee:	47 95       	ror	r20
     3f0:	56 95       	lsr	r21
     3f2:	47 95       	ror	r20
     3f4:	50 93 a2 00 	sts	0x00A2, r21	; 0x8000a2 <temp+0x1>
     3f8:	40 93 a1 00 	sts	0x00A1, r20	; 0x8000a1 <temp>
     3fc:	9a 01       	movw	r18, r20
     3fe:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     402:	96 95       	lsr	r25
     404:	87 95       	ror	r24
     406:	96 95       	lsr	r25
     408:	87 95       	ror	r24
     40a:	96 95       	lsr	r25
     40c:	87 95       	ror	r24
     40e:	9c 01       	movw	r18, r24
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	82 0f       	add	r24, r18
     422:	93 1f       	adc	r25, r19
     424:	9a 01       	movw	r18, r20
     426:	28 1b       	sub	r18, r24
     428:	39 0b       	sbc	r19, r25
     42a:	c9 01       	movw	r24, r18
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <tens+0x1>
     432:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <tens>
     436:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	c1 30       	cpi	r28, 0x01	; 1
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	09 f5       	brne	.+66     	; 0x488 <__stack+0x29>
     446:	98 01       	movw	r18, r16
     448:	ad ec       	ldi	r26, 0xCD	; 205
     44a:	bc ec       	ldi	r27, 0xCC	; 204
     44c:	0e 94 9e 08 	call	0x113c	; 0x113c <__umulhisi3>
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	96 95       	lsr	r25
     45a:	87 95       	ror	r24
     45c:	9c 01       	movw	r18, r24
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	98 01       	movw	r18, r16
     474:	28 1b       	sub	r18, r24
     476:	39 0b       	sbc	r19, r25
     478:	c9 01       	movw	r24, r18
     47a:	c0 96       	adiw	r24, 0x30	; 48
     47c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <unit+0x1>
     480:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <unit>
     484:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
     488:	26 97       	sbiw	r28, 0x06	; 6
     48a:	1c f0       	brlt	.+6      	; 0x492 <__stack+0x33>
     48c:	85 e4       	ldi	r24, 0x45	; 69
     48e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_wr_char>
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	08 95       	ret

0000049c <motion_pin_config>:
     49c:	87 b3       	in	r24, 0x17	; 23
     49e:	8f 60       	ori	r24, 0x0F	; 15
     4a0:	87 bb       	out	0x17, r24	; 23
     4a2:	88 b3       	in	r24, 0x18	; 24
     4a4:	80 7f       	andi	r24, 0xF0	; 240
     4a6:	88 bb       	out	0x18, r24	; 24
     4a8:	81 b3       	in	r24, 0x11	; 17
     4aa:	80 63       	ori	r24, 0x30	; 48
     4ac:	81 bb       	out	0x11, r24	; 17
     4ae:	82 b3       	in	r24, 0x12	; 18
     4b0:	80 63       	ori	r24, 0x30	; 48
     4b2:	82 bb       	out	0x12, r24	; 18
     4b4:	08 95       	ret

000004b6 <motion_set>:
     4b6:	8f 70       	andi	r24, 0x0F	; 15
     4b8:	98 b3       	in	r25, 0x18	; 24
     4ba:	90 7f       	andi	r25, 0xF0	; 240
     4bc:	89 2b       	or	r24, r25
     4be:	88 bb       	out	0x18, r24	; 24
     4c0:	08 95       	ret

000004c2 <forward>:
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
     4c8:	08 95       	ret

000004ca <left>:
     4ca:	85 e0       	ldi	r24, 0x05	; 5
     4cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
     4d0:	08 95       	ret

000004d2 <right>:
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <motion_set>
     4d8:	08 95       	ret

000004da <adc_init>:
}

//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
     4da:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
     4e0:	80 e8       	ldi	r24, 0x80	; 128
     4e2:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     4e4:	86 e8       	ldi	r24, 0x86	; 134
     4e6:	86 b9       	out	0x06, r24	; 6
     4e8:	08 95       	ret

000004ea <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     4ea:	84 b3       	in	r24, 0x14	; 20
     4ec:	87 6f       	ori	r24, 0xF7	; 247
     4ee:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     4f0:	85 b3       	in	r24, 0x15	; 21
     4f2:	80 78       	andi	r24, 0x80	; 128
     4f4:	85 bb       	out	0x15, r24	; 21
     4f6:	08 95       	ret

000004f8 <adc_pin_config>:
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
     4f8:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
     4fa:	1b ba       	out	0x1b, r1	; 27
     4fc:	08 95       	ret

000004fe <port_init>:
}

//Function to Initialize PORTS
void port_init()
{
 lcd_port_config();
     4fe:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_port_config>
 adc_pin_config();
     502:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <adc_pin_config>
 motion_pin_config();
     506:	0e 94 4e 02 	call	0x49c	; 0x49c <motion_pin_config>
     50a:	08 95       	ret

0000050c <init_devices>:
}


void init_devices (void)
{
 cli(); //Clears the global interrupts
     50c:	f8 94       	cli
 port_init();
     50e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <port_init>
 adc_init();
     512:	0e 94 6d 02 	call	0x4da	; 0x4da <adc_init>
 sei(); //Enables the global interrupts
     516:	78 94       	sei
     518:	08 95       	ret

0000051a <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     51a:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	8d bd       	out	0x2d, r24	; 45
 TCNT1L = 0x01;
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	9c bd       	out	0x2c, r25	; 44
 OCR1AH = 0x00;
     524:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;//left motor pwm
     526:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
     528:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;//right motor pwm
     52a:	88 bd       	out	0x28, r24	; 40
 ICR1H  = 0x00;
     52c:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
     52e:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA1;
     530:	81 ea       	ldi	r24, 0xA1	; 161
     532:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
     534:	8d e0       	ldi	r24, 0x0D	; 13
     536:	8e bd       	out	0x2e, r24	; 46
     538:	08 95       	ret

0000053a <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;
     53a:	87 70       	andi	r24, 0x07	; 7
 ADMUX= 0x20| Ch;
     53c:	80 62       	ori	r24, 0x20	; 32
     53e:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
     540:	86 b1       	in	r24, 0x06	; 6
     542:	80 64       	ori	r24, 0x40	; 64
     544:	86 b9       	out	0x06, r24	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     546:	34 9b       	sbis	0x06, 4	; 6
     548:	fe cf       	rjmp	.-4      	; 0x546 <ADC_Conversion+0xc>
 a=ADCH;
     54a:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     54c:	96 b1       	in	r25, 0x06	; 6
     54e:	90 61       	ori	r25, 0x10	; 16
     550:	96 b9       	out	0x06, r25	; 6
 return a;
}
     552:	08 95       	ret

00000554 <main>:

//Main Function
int main(void)
{
 //initialisatons
 init_devices();
     554:	0e 94 86 02 	call	0x50c	; 0x50c <init_devices>
 timer1_init();
     558:	0e 94 8d 02 	call	0x51a	; 0x51a <timer1_init>

 lcd_set_4bit();
     55c:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_set_4bit>
 lcd_init();
     560:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_init>

*/
while(1)
{
	//sensing part
	l=ADC_Conversion(3);
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	0e 94 9d 02 	call	0x53a	; 0x53a <ADC_Conversion>
     56a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <l>
	c=ADC_Conversion(4);
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	0e 94 9d 02 	call	0x53a	; 0x53a <ADC_Conversion>
     574:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <c>
	r=ADC_Conversion(5);
     578:	85 e0       	ldi	r24, 0x05	; 5
     57a:	0e 94 9d 02 	call	0x53a	; 0x53a <ADC_Conversion>
     57e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <r>
	lcd_print(1, 1, l, 3);
     582:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <l>
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	23 e0       	ldi	r18, 0x03	; 3
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 48 01 	call	0x290	; 0x290 <lcd_print>
	lcd_print(1, 5, c, 3);
     594:	40 91 89 00 	lds	r20, 0x0089	; 0x800089 <c>
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	23 e0       	ldi	r18, 0x03	; 3
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	65 e0       	ldi	r22, 0x05	; 5
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 48 01 	call	0x290	; 0x290 <lcd_print>
	lcd_print(1, 9, r, 3);
     5a6:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <r>
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	23 e0       	ldi	r18, 0x03	; 3
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	69 e0       	ldi	r22, 0x09	; 9
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 48 01 	call	0x290	; 0x290 <lcd_print>
	//********************************************************************************************************************
	//Angle error Guess part
	l_max = 90;
     5b8:	6a e5       	ldi	r22, 0x5A	; 90
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <l_max+0x1>
     5c0:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <l_max>
	c_max = 96;
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f0 e6       	ldi	r31, 0x60	; 96
     5c8:	ef 2e       	mov	r14, r31
     5ca:	f1 2c       	mov	r15, r1
     5cc:	f0 2d       	mov	r31, r0
     5ce:	f0 92 7f 00 	sts	0x007F, r15	; 0x80007f <c_max+0x1>
     5d2:	e0 92 7e 00 	sts	0x007E, r14	; 0x80007e <c_max>
	r_max = 105;
     5d6:	c9 e6       	ldi	r28, 0x69	; 105
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
     5da:	d0 93 7d 00 	sts	0x007D, r29	; 0x80007d <r_max+0x1>
     5de:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <r_max>
	l_norm = (l-6)*100/l_max + 0.0001;//varies from 0 to 100
     5e2:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <l>
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	26 50       	subi	r18, 0x06	; 6
     5ea:	31 09       	sbc	r19, r1
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f4 e6       	ldi	r31, 0x64	; 100
     5f0:	7f 2e       	mov	r7, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	72 9e       	mul	r7, r18
     5f6:	c0 01       	movw	r24, r0
     5f8:	73 9e       	mul	r7, r19
     5fa:	90 0d       	add	r25, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	0e 94 8a 08 	call	0x1114	; 0x1114 <__divmodhi4>
     602:	07 2e       	mov	r0, r23
     604:	00 0c       	add	r0, r0
     606:	88 0b       	sbc	r24, r24
     608:	99 0b       	sbc	r25, r25
     60a:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     60e:	27 e1       	ldi	r18, 0x17	; 23
     610:	37 eb       	ldi	r19, 0xB7	; 183
     612:	41 ed       	ldi	r20, 0xD1	; 209
     614:	58 e3       	ldi	r21, 0x38	; 56
     616:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3>
     61a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fixsfsi>
     61e:	4b 01       	movw	r8, r22
     620:	5c 01       	movw	r10, r24
     622:	8b 01       	movw	r16, r22
     624:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <l_norm+0x1>
     628:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <l_norm>
	c_norm = (c-6)*100/c_max + 0.0001;//varies from 0 to 100
     62c:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <c>
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	26 50       	subi	r18, 0x06	; 6
     634:	31 09       	sbc	r19, r1
     636:	72 9e       	mul	r7, r18
     638:	c0 01       	movw	r24, r0
     63a:	73 9e       	mul	r7, r19
     63c:	90 0d       	add	r25, r0
     63e:	11 24       	eor	r1, r1
     640:	b7 01       	movw	r22, r14
     642:	0e 94 8a 08 	call	0x1114	; 0x1114 <__divmodhi4>
     646:	07 2e       	mov	r0, r23
     648:	00 0c       	add	r0, r0
     64a:	88 0b       	sbc	r24, r24
     64c:	99 0b       	sbc	r25, r25
     64e:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     652:	27 e1       	ldi	r18, 0x17	; 23
     654:	37 eb       	ldi	r19, 0xB7	; 183
     656:	41 ed       	ldi	r20, 0xD1	; 209
     658:	58 e3       	ldi	r21, 0x38	; 56
     65a:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3>
     65e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fixsfsi>
     662:	6b 01       	movw	r12, r22
     664:	7c 01       	movw	r14, r24
     666:	1b 01       	movw	r2, r22
     668:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <c_norm+0x1>
     66c:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <c_norm>
	r_norm = (r-6)*100/r_max + 0.0001;//varies from 0 to 100
     670:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <r>
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	26 50       	subi	r18, 0x06	; 6
     678:	31 09       	sbc	r19, r1
     67a:	72 9e       	mul	r7, r18
     67c:	c0 01       	movw	r24, r0
     67e:	73 9e       	mul	r7, r19
     680:	90 0d       	add	r25, r0
     682:	11 24       	eor	r1, r1
     684:	be 01       	movw	r22, r28
     686:	0e 94 8a 08 	call	0x1114	; 0x1114 <__divmodhi4>
     68a:	07 2e       	mov	r0, r23
     68c:	00 0c       	add	r0, r0
     68e:	88 0b       	sbc	r24, r24
     690:	99 0b       	sbc	r25, r25
     692:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     696:	27 e1       	ldi	r18, 0x17	; 23
     698:	37 eb       	ldi	r19, 0xB7	; 183
     69a:	41 ed       	ldi	r20, 0xD1	; 209
     69c:	58 e3       	ldi	r21, 0x38	; 56
     69e:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3>
     6a2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fixsfsi>
     6a6:	2b 01       	movw	r4, r22
     6a8:	3c 01       	movw	r6, r24
     6aa:	eb 01       	movw	r28, r22
     6ac:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <r_norm+0x1>
     6b0:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <r_norm>
	
	if ((l_norm>=2) && (r_norm>=2)){//case of a crossing or 2 nearby tracks
     6b4:	02 30       	cpi	r16, 0x02	; 2
     6b6:	11 05       	cpc	r17, r1
     6b8:	a4 f0       	brlt	.+40     	; 0x6e2 <main+0x18e>
     6ba:	62 30       	cpi	r22, 0x02	; 2
     6bc:	71 05       	cpc	r23, r1
     6be:	8c f0       	brlt	.+34     	; 0x6e2 <main+0x18e>
		angle_error_norm = 0;//in this case move the bot forward to get out of dilemma
     6c0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <angle_error_norm>
     6c4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <angle_error_norm+0x1>
     6c8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <angle_error_norm+0x2>
     6cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <angle_error_norm+0x3>
		angle_error_prev = 0;
     6d0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <angle_error_prev>
     6d4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <angle_error_prev+0x1>
     6d8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <angle_error_prev+0x2>
     6dc:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <angle_error_prev+0x3>
     6e0:	9f c0       	rjmp	.+318    	; 0x820 <main+0x2cc>
	}
	else if ((c_norm<=2.9) && (r_norm>=0.1)){//turned too left from track
     6e2:	b6 01       	movw	r22, r12
     6e4:	0d 2c       	mov	r0, r13
     6e6:	00 0c       	add	r0, r0
     6e8:	88 0b       	sbc	r24, r24
     6ea:	99 0b       	sbc	r25, r25
     6ec:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     6f0:	2a e9       	ldi	r18, 0x9A	; 154
     6f2:	39 e9       	ldi	r19, 0x99	; 153
     6f4:	49 e3       	ldi	r20, 0x39	; 57
     6f6:	50 e4       	ldi	r21, 0x40	; 64
     6f8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	14 f1       	brlt	.+68     	; 0x744 <main+0x1f0>
     700:	b2 01       	movw	r22, r4
     702:	05 2c       	mov	r0, r5
     704:	00 0c       	add	r0, r0
     706:	88 0b       	sbc	r24, r24
     708:	99 0b       	sbc	r25, r25
     70a:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     70e:	2d ec       	ldi	r18, 0xCD	; 205
     710:	3c ec       	ldi	r19, 0xCC	; 204
     712:	4c ec       	ldi	r20, 0xCC	; 204
     714:	5d e3       	ldi	r21, 0x3D	; 61
     716:	0e 94 18 08 	call	0x1030	; 0x1030 <__gesf2>
     71a:	88 23       	and	r24, r24
     71c:	9c f0       	brlt	.+38     	; 0x744 <main+0x1f0>
		angle_error_norm = 200-r_norm;
     71e:	68 ec       	ldi	r22, 0xC8	; 200
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	64 19       	sub	r22, r4
     724:	75 09       	sbc	r23, r5
     726:	07 2e       	mov	r0, r23
     728:	00 0c       	add	r0, r0
     72a:	88 0b       	sbc	r24, r24
     72c:	99 0b       	sbc	r25, r25
     72e:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     732:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <angle_error_norm>
     736:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <angle_error_norm+0x1>
     73a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <angle_error_norm+0x2>
     73e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <angle_error_norm+0x3>
     742:	6e c0       	rjmp	.+220    	; 0x820 <main+0x2cc>
	}
	else if ((c_norm>=2) && (r_norm>=l_norm)){//turned little left from track
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	28 16       	cp	r2, r24
     748:	31 04       	cpc	r3, r1
     74a:	b4 f0       	brlt	.+44     	; 0x778 <main+0x224>
     74c:	c0 17       	cp	r28, r16
     74e:	d1 07       	cpc	r29, r17
     750:	9c f0       	brlt	.+38     	; 0x778 <main+0x224>
		angle_error_norm = 100-c_norm;
     752:	64 e6       	ldi	r22, 0x64	; 100
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	6c 19       	sub	r22, r12
     758:	7d 09       	sbc	r23, r13
     75a:	07 2e       	mov	r0, r23
     75c:	00 0c       	add	r0, r0
     75e:	88 0b       	sbc	r24, r24
     760:	99 0b       	sbc	r25, r25
     762:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     766:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <angle_error_norm>
     76a:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <angle_error_norm+0x1>
     76e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <angle_error_norm+0x2>
     772:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <angle_error_norm+0x3>
     776:	54 c0       	rjmp	.+168    	; 0x820 <main+0x2cc>
	}
	else if ((c_norm>=2) && (l_norm>=r_norm)){//turned little right from track
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	28 16       	cp	r2, r24
     77c:	31 04       	cpc	r3, r1
     77e:	ac f0       	brlt	.+42     	; 0x7aa <main+0x256>
     780:	0c 17       	cp	r16, r28
     782:	1d 07       	cpc	r17, r29
     784:	94 f0       	brlt	.+36     	; 0x7aa <main+0x256>
		angle_error_norm = c_norm-100;
     786:	b6 01       	movw	r22, r12
     788:	64 56       	subi	r22, 0x64	; 100
     78a:	71 09       	sbc	r23, r1
     78c:	07 2e       	mov	r0, r23
     78e:	00 0c       	add	r0, r0
     790:	88 0b       	sbc	r24, r24
     792:	99 0b       	sbc	r25, r25
     794:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     798:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <angle_error_norm>
     79c:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <angle_error_norm+0x1>
     7a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <angle_error_norm+0x2>
     7a4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <angle_error_norm+0x3>
     7a8:	3b c0       	rjmp	.+118    	; 0x820 <main+0x2cc>
	}
	else if ((c_norm<=2) && (l_norm>=0.1)){//turned too right from track
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	28 16       	cp	r2, r24
     7ae:	31 04       	cpc	r3, r1
     7b0:	0c f5       	brge	.+66     	; 0x7f4 <main+0x2a0>
     7b2:	b4 01       	movw	r22, r8
     7b4:	09 2c       	mov	r0, r9
     7b6:	00 0c       	add	r0, r0
     7b8:	88 0b       	sbc	r24, r24
     7ba:	99 0b       	sbc	r25, r25
     7bc:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     7c0:	2d ec       	ldi	r18, 0xCD	; 205
     7c2:	3c ec       	ldi	r19, 0xCC	; 204
     7c4:	4c ec       	ldi	r20, 0xCC	; 204
     7c6:	5d e3       	ldi	r21, 0x3D	; 61
     7c8:	0e 94 18 08 	call	0x1030	; 0x1030 <__gesf2>
     7cc:	88 23       	and	r24, r24
     7ce:	94 f0       	brlt	.+36     	; 0x7f4 <main+0x2a0>
		angle_error_norm = l_norm-200;
     7d0:	b4 01       	movw	r22, r8
     7d2:	68 5c       	subi	r22, 0xC8	; 200
     7d4:	71 09       	sbc	r23, r1
     7d6:	07 2e       	mov	r0, r23
     7d8:	00 0c       	add	r0, r0
     7da:	88 0b       	sbc	r24, r24
     7dc:	99 0b       	sbc	r25, r25
     7de:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     7e2:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <angle_error_norm>
     7e6:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <angle_error_norm+0x1>
     7ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <angle_error_norm+0x2>
     7ee:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <angle_error_norm+0x3>
     7f2:	16 c0       	rjmp	.+44     	; 0x820 <main+0x2cc>
	}
	else{
		angle_error_norm = angle_error_prev*5;
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 ea       	ldi	r20, 0xA0	; 160
     7fa:	50 e4       	ldi	r21, 0x40	; 64
     7fc:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <angle_error_prev>
     800:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <angle_error_prev+0x1>
     804:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <angle_error_prev+0x2>
     808:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <angle_error_prev+0x3>
     80c:	0e 94 1d 08 	call	0x103a	; 0x103a <__mulsf3>
     810:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <angle_error_norm>
     814:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <angle_error_norm+0x1>
     818:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <angle_error_norm+0x2>
     81c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <angle_error_norm+0x3>
	}
	
	angle_error_guess = angle_error_norm/5.0;//Here we make a Rough Guess of The Angle
     820:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <angle_error_norm>
     824:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <angle_error_norm+0x1>
     828:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <angle_error_norm+0x2>
     82c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <angle_error_norm+0x3>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 ea       	ldi	r20, 0xA0	; 160
     836:	50 e4       	ldi	r21, 0x40	; 64
     838:	0e 94 66 06 	call	0xccc	; 0xccc <__divsf3>
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
     840:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <angle_error_guess>
     844:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <angle_error_guess+0x1>
     848:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <angle_error_guess+0x2>
     84c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <angle_error_guess+0x3>
	/*relative_error_l = (l_norm-c_norm)*200/(l_norm+c_norm);//varies from 0 to 100
	relative_error_r = (r_norm-c_norm)*200/(r_norm+c_norm);//varies from 0 to 100
	final_angle_error = (relative_error_l-relative_error_r)*180/200;*/
	
	//control part 
	kp = 12.0;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e4       	ldi	r26, 0x40	; 64
     856:	b1 e4       	ldi	r27, 0x41	; 65
     858:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <kp>
     85c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <kp+0x1>
     860:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <kp+0x2>
     864:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <kp+0x3>
	ki = 0.1;
     868:	8d ec       	ldi	r24, 0xCD	; 205
     86a:	9c ec       	ldi	r25, 0xCC	; 204
     86c:	ac ec       	ldi	r26, 0xCC	; 204
     86e:	bd e3       	ldi	r27, 0x3D	; 61
     870:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <ki>
     874:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ki+0x1>
     878:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <ki+0x2>
     87c:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <ki+0x3>
	kd = 1;
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a0 e8       	ldi	r26, 0x80	; 128
     886:	bf e3       	ldi	r27, 0x3F	; 63
     888:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <kd>
     88c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <kd+0x1>
     890:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <kd+0x2>
     894:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <kd+0x3>
	angle_error_sum = angle_error_sum + angle_error_guess;
     898:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <angle_error_sum>
     89c:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <angle_error_sum+0x1>
     8a0:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <angle_error_sum+0x2>
     8a4:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <angle_error_sum+0x3>
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3>
     8b0:	2b 01       	movw	r4, r22
     8b2:	3c 01       	movw	r6, r24
     8b4:	60 93 93 00 	sts	0x0093, r22	; 0x800093 <angle_error_sum>
     8b8:	70 93 94 00 	sts	0x0094, r23	; 0x800094 <angle_error_sum+0x1>
     8bc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <angle_error_sum+0x2>
     8c0:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <angle_error_sum+0x3>
	angle_error_diff = angle_error_guess - angle_error_prev;
     8c4:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <angle_error_prev>
     8c8:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <angle_error_prev+0x1>
     8cc:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <angle_error_prev+0x2>
     8d0:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <angle_error_prev+0x3>
     8d4:	c7 01       	movw	r24, r14
     8d6:	b6 01       	movw	r22, r12
     8d8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__subsf3>
     8dc:	4b 01       	movw	r8, r22
     8de:	5c 01       	movw	r10, r24
     8e0:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <angle_error_diff>
     8e4:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <angle_error_diff+0x1>
     8e8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <angle_error_diff+0x2>
     8ec:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <angle_error_diff+0x3>
	actuation_DM = (kp*angle_error_guess) + ki*angle_error_sum + kd*(angle_error_diff);//final_angle_error;	//floors off
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e4       	ldi	r20, 0x40	; 64
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	c7 01       	movw	r24, r14
     8fa:	b6 01       	movw	r22, r12
     8fc:	0e 94 1d 08 	call	0x103a	; 0x103a <__mulsf3>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
     904:	2d ec       	ldi	r18, 0xCD	; 205
     906:	3c ec       	ldi	r19, 0xCC	; 204
     908:	4c ec       	ldi	r20, 0xCC	; 204
     90a:	5d e3       	ldi	r21, 0x3D	; 61
     90c:	c3 01       	movw	r24, r6
     90e:	b2 01       	movw	r22, r4
     910:	0e 94 1d 08 	call	0x103a	; 0x103a <__mulsf3>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3>
     920:	9b 01       	movw	r18, r22
     922:	ac 01       	movw	r20, r24
     924:	c5 01       	movw	r24, r10
     926:	b4 01       	movw	r22, r8
     928:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3>
     92c:	6b 01       	movw	r12, r22
     92e:	7c 01       	movw	r14, r24
     930:	60 93 b6 00 	sts	0x00B6, r22	; 0x8000b6 <actuation_DM>
     934:	70 93 b7 00 	sts	0x00B7, r23	; 0x8000b7 <actuation_DM+0x1>
     938:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <actuation_DM+0x2>
     93c:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <actuation_DM+0x3>
	//actuation part
	//_delay_ms(100);
	//speed part
	
	//absolute value of actuation_DM
	if(actuation_DM<0){mod = -actuation_DM;}
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	a9 01       	movw	r20, r18
     946:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     94a:	88 23       	and	r24, r24
     94c:	64 f4       	brge	.+24     	; 0x966 <main+0x412>
     94e:	d7 01       	movw	r26, r14
     950:	c6 01       	movw	r24, r12
     952:	b0 58       	subi	r27, 0x80	; 128
     954:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     958:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     95c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     960:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     964:	08 c0       	rjmp	.+16     	; 0x976 <main+0x422>
	else {mod = actuation_DM;}
     966:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
     96a:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     96e:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     972:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	//Common Mode Speed Part
	actuation_CM = 255 - mod/2.0;//speed of centre of mass of robot; lower speed for sharper turns
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     982:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     986:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     98a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     98e:	0e 94 1d 08 	call	0x103a	; 0x103a <__mulsf3>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	8f e7       	ldi	r24, 0x7F	; 127
     99c:	93 e4       	ldi	r25, 0x43	; 67
     99e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__subsf3>
     9a2:	4b 01       	movw	r8, r22
     9a4:	5c 01       	movw	r10, r24
     9a6:	60 93 8b 00 	sts	0x008B, r22	; 0x80008b <actuation_CM>
     9aa:	70 93 8c 00 	sts	0x008C, r23	; 0x80008c <actuation_CM+0x1>
     9ae:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <actuation_CM+0x2>
     9b2:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <actuation_CM+0x3>
	motor_l = actuation_CM + actuation_DM/2.0;
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	5f e3       	ldi	r21, 0x3F	; 63
     9be:	c7 01       	movw	r24, r14
     9c0:	b6 01       	movw	r22, r12
     9c2:	0e 94 1d 08 	call	0x103a	; 0x103a <__mulsf3>
     9c6:	6b 01       	movw	r12, r22
     9c8:	7c 01       	movw	r14, r24
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	c5 01       	movw	r24, r10
     9d0:	b4 01       	movw	r22, r8
     9d2:	0e 94 f5 05 	call	0xbea	; 0xbea <__addsf3>
     9d6:	2b 01       	movw	r4, r22
     9d8:	3c 01       	movw	r6, r24
     9da:	60 93 9d 00 	sts	0x009D, r22	; 0x80009d <motor_l>
     9de:	70 93 9e 00 	sts	0x009E, r23	; 0x80009e <motor_l+0x1>
     9e2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <motor_l+0x2>
     9e6:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <motor_l+0x3>
	motor_r = actuation_CM - actuation_DM/2.0;
     9ea:	a7 01       	movw	r20, r14
     9ec:	96 01       	movw	r18, r12
     9ee:	c5 01       	movw	r24, r10
     9f0:	b4 01       	movw	r22, r8
     9f2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__subsf3>
     9f6:	6b 01       	movw	r12, r22
     9f8:	7c 01       	movw	r14, r24
     9fa:	60 93 8f 00 	sts	0x008F, r22	; 0x80008f <motor_r>
     9fe:	70 93 90 00 	sts	0x0090, r23	; 0x800090 <motor_r+0x1>
     a02:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <motor_r+0x2>
     a06:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <motor_r+0x3>
	
	//clipping
	if(motor_l>255){motor_l=255;}
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	4f e7       	ldi	r20, 0x7F	; 127
     a10:	53 e4       	ldi	r21, 0x43	; 67
     a12:	c3 01       	movw	r24, r6
     a14:	b2 01       	movw	r22, r4
     a16:	0e 94 18 08 	call	0x1030	; 0x1030 <__gesf2>
     a1a:	18 16       	cp	r1, r24
     a1c:	64 f4       	brge	.+24     	; 0xa36 <main+0x4e2>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	af e7       	ldi	r26, 0x7F	; 127
     a24:	b3 e4       	ldi	r27, 0x43	; 67
     a26:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <motor_l>
     a2a:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <motor_l+0x1>
     a2e:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <motor_l+0x2>
     a32:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <motor_l+0x3>
	if(motor_l<-255){motor_l=-255;}
     a36:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <motor_l>
     a3a:	70 91 9e 00 	lds	r23, 0x009E	; 0x80009e <motor_l+0x1>
     a3e:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <motor_l+0x2>
     a42:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <motor_l+0x3>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	4f e7       	ldi	r20, 0x7F	; 127
     a4c:	53 ec       	ldi	r21, 0xC3	; 195
     a4e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     a52:	88 23       	and	r24, r24
     a54:	64 f4       	brge	.+24     	; 0xa6e <main+0x51a>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	af e7       	ldi	r26, 0x7F	; 127
     a5c:	b3 ec       	ldi	r27, 0xC3	; 195
     a5e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <motor_l>
     a62:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <motor_l+0x1>
     a66:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <motor_l+0x2>
     a6a:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <motor_l+0x3>
	if(motor_r>255){motor_r=255;}
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	4f e7       	ldi	r20, 0x7F	; 127
     a74:	53 e4       	ldi	r21, 0x43	; 67
     a76:	c7 01       	movw	r24, r14
     a78:	b6 01       	movw	r22, r12
     a7a:	0e 94 18 08 	call	0x1030	; 0x1030 <__gesf2>
     a7e:	18 16       	cp	r1, r24
     a80:	64 f4       	brge	.+24     	; 0xa9a <main+0x546>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	af e7       	ldi	r26, 0x7F	; 127
     a88:	b3 e4       	ldi	r27, 0x43	; 67
     a8a:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <motor_r>
     a8e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <motor_r+0x1>
     a92:	a0 93 91 00 	sts	0x0091, r26	; 0x800091 <motor_r+0x2>
     a96:	b0 93 92 00 	sts	0x0092, r27	; 0x800092 <motor_r+0x3>
	if(motor_r<-255){motor_r=-255;}
     a9a:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <motor_r>
     a9e:	70 91 90 00 	lds	r23, 0x0090	; 0x800090 <motor_r+0x1>
     aa2:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <motor_r+0x2>
     aa6:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <motor_r+0x3>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	4f e7       	ldi	r20, 0x7F	; 127
     ab0:	53 ec       	ldi	r21, 0xC3	; 195
     ab2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     ab6:	88 23       	and	r24, r24
     ab8:	64 f4       	brge	.+24     	; 0xad2 <main+0x57e>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	af e7       	ldi	r26, 0x7F	; 127
     ac0:	b3 ec       	ldi	r27, 0xC3	; 195
     ac2:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <motor_r>
     ac6:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <motor_r+0x1>
     aca:	a0 93 91 00 	sts	0x0091, r26	; 0x800091 <motor_r+0x2>
     ace:	b0 93 92 00 	sts	0x0092, r27	; 0x800092 <motor_r+0x3>
	//*******************************************************************************************************************************************
	//direction part
	if(motor_l<0)
     ad2:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <motor_l>
     ad6:	70 91 9e 00 	lds	r23, 0x009E	; 0x80009e <motor_l+0x1>
     ada:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <motor_l+0x2>
     ade:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <motor_l+0x3>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	a9 01       	movw	r20, r18
     ae8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     aec:	88 23       	and	r24, r24
     aee:	1c f4       	brge	.+6      	; 0xaf6 <main+0x5a2>
	{
		left();
     af0:	0e 94 65 02 	call	0x4ca	; 0x4ca <left>
     af4:	14 c0       	rjmp	.+40     	; 0xb1e <main+0x5ca>
	}
	else if(motor_r<0)
     af6:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <motor_r>
     afa:	70 91 90 00 	lds	r23, 0x0090	; 0x800090 <motor_r+0x1>
     afe:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <motor_r+0x2>
     b02:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <motor_r+0x3>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	a9 01       	movw	r20, r18
     b0c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	1c f4       	brge	.+6      	; 0xb1a <main+0x5c6>
	{
		right();
     b14:	0e 94 69 02 	call	0x4d2	; 0x4d2 <right>
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <main+0x5ca>
	}
	else{
		forward();
     b1a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <forward>
	}
	
	//absolute values of motor_l and motor_r
	if(motor_l<0){motor_l = -motor_l;}
     b1e:	c0 90 9d 00 	lds	r12, 0x009D	; 0x80009d <motor_l>
     b22:	d0 90 9e 00 	lds	r13, 0x009E	; 0x80009e <motor_l+0x1>
     b26:	e0 90 9f 00 	lds	r14, 0x009F	; 0x80009f <motor_l+0x2>
     b2a:	f0 90 a0 00 	lds	r15, 0x00A0	; 0x8000a0 <motor_l+0x3>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	a9 01       	movw	r20, r18
     b34:	c7 01       	movw	r24, r14
     b36:	b6 01       	movw	r22, r12
     b38:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     b3c:	88 23       	and	r24, r24
     b3e:	64 f4       	brge	.+24     	; 0xb58 <main+0x604>
     b40:	f7 fa       	bst	r15, 7
     b42:	f0 94       	com	r15
     b44:	f7 f8       	bld	r15, 7
     b46:	f0 94       	com	r15
     b48:	c0 92 9d 00 	sts	0x009D, r12	; 0x80009d <motor_l>
     b4c:	d0 92 9e 00 	sts	0x009E, r13	; 0x80009e <motor_l+0x1>
     b50:	e0 92 9f 00 	sts	0x009F, r14	; 0x80009f <motor_l+0x2>
     b54:	f0 92 a0 00 	sts	0x00A0, r15	; 0x8000a0 <motor_l+0x3>
	if(motor_r<0){motor_r = -motor_r;}
     b58:	c0 90 8f 00 	lds	r12, 0x008F	; 0x80008f <motor_r>
     b5c:	d0 90 90 00 	lds	r13, 0x0090	; 0x800090 <motor_r+0x1>
     b60:	e0 90 91 00 	lds	r14, 0x0091	; 0x800091 <motor_r+0x2>
     b64:	f0 90 92 00 	lds	r15, 0x0092	; 0x800092 <motor_r+0x3>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	c7 01       	movw	r24, r14
     b70:	b6 01       	movw	r22, r12
     b72:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__cmpsf2>
     b76:	88 23       	and	r24, r24
     b78:	64 f4       	brge	.+24     	; 0xb92 <main+0x63e>
     b7a:	f7 fa       	bst	r15, 7
     b7c:	f0 94       	com	r15
     b7e:	f7 f8       	bld	r15, 7
     b80:	f0 94       	com	r15
     b82:	c0 92 8f 00 	sts	0x008F, r12	; 0x80008f <motor_r>
     b86:	d0 92 90 00 	sts	0x0090, r13	; 0x800090 <motor_r+0x1>
     b8a:	e0 92 91 00 	sts	0x0091, r14	; 0x800091 <motor_r+0x2>
     b8e:	f0 92 92 00 	sts	0x0092, r15	; 0x800092 <motor_r+0x3>
	OCR1AL = floor(motor_l);//left motor; adjust the sign
     b92:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <motor_l>
     b96:	70 91 9e 00 	lds	r23, 0x009E	; 0x80009e <motor_l+0x1>
     b9a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <motor_l+0x2>
     b9e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <motor_l+0x3>
     ba2:	0e 94 4b 07 	call	0xe96	; 0xe96 <floor>
     ba6:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fixunssfsi>
     baa:	6a bd       	out	0x2a, r22	; 42
	OCR1BL = floor(motor_r);//right motor; adjust the complement sign
     bac:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <motor_r>
     bb0:	70 91 90 00 	lds	r23, 0x0090	; 0x800090 <motor_r+0x1>
     bb4:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <motor_r+0x2>
     bb8:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <motor_r+0x3>
     bbc:	0e 94 4b 07 	call	0xe96	; 0xe96 <floor>
     bc0:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fixunssfsi>
     bc4:	68 bd       	out	0x28, r22	; 40
	//*****************************************************************************************************************************************
	//preparation for next step
	angle_error_prev = angle_error_guess;
     bc6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <angle_error_guess>
     bca:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <angle_error_guess+0x1>
     bce:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <angle_error_guess+0x2>
     bd2:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <angle_error_guess+0x3>
     bd6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <angle_error_prev>
     bda:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <angle_error_prev+0x1>
     bde:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <angle_error_prev+0x2>
     be2:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <angle_error_prev+0x3>
}
     be6:	be cc       	rjmp	.-1668   	; 0x564 <main+0x10>

00000be8 <__subsf3>:
     be8:	50 58       	subi	r21, 0x80	; 128

00000bea <__addsf3>:
     bea:	bb 27       	eor	r27, r27
     bec:	aa 27       	eor	r26, r26
     bee:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3x>
     bf2:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_round>
     bf6:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscA>
     bfa:	38 f0       	brcs	.+14     	; 0xc0a <__addsf3+0x20>
     bfc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscB>
     c00:	20 f0       	brcs	.+8      	; 0xc0a <__addsf3+0x20>
     c02:	39 f4       	brne	.+14     	; 0xc12 <__addsf3+0x28>
     c04:	9f 3f       	cpi	r25, 0xFF	; 255
     c06:	19 f4       	brne	.+6      	; 0xc0e <__addsf3+0x24>
     c08:	26 f4       	brtc	.+8      	; 0xc12 <__addsf3+0x28>
     c0a:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_nan>
     c0e:	0e f4       	brtc	.+2      	; 0xc12 <__addsf3+0x28>
     c10:	e0 95       	com	r30
     c12:	e7 fb       	bst	r30, 7
     c14:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>

00000c18 <__addsf3x>:
     c18:	e9 2f       	mov	r30, r25
     c1a:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_split3>
     c1e:	58 f3       	brcs	.-42     	; 0xbf6 <__addsf3+0xc>
     c20:	ba 17       	cp	r27, r26
     c22:	62 07       	cpc	r22, r18
     c24:	73 07       	cpc	r23, r19
     c26:	84 07       	cpc	r24, r20
     c28:	95 07       	cpc	r25, r21
     c2a:	20 f0       	brcs	.+8      	; 0xc34 <__addsf3x+0x1c>
     c2c:	79 f4       	brne	.+30     	; 0xc4c <__addsf3x+0x34>
     c2e:	a6 f5       	brtc	.+104    	; 0xc98 <__addsf3x+0x80>
     c30:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_zero>
     c34:	0e f4       	brtc	.+2      	; 0xc38 <__addsf3x+0x20>
     c36:	e0 95       	com	r30
     c38:	0b 2e       	mov	r0, r27
     c3a:	ba 2f       	mov	r27, r26
     c3c:	a0 2d       	mov	r26, r0
     c3e:	0b 01       	movw	r0, r22
     c40:	b9 01       	movw	r22, r18
     c42:	90 01       	movw	r18, r0
     c44:	0c 01       	movw	r0, r24
     c46:	ca 01       	movw	r24, r20
     c48:	a0 01       	movw	r20, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	ff 27       	eor	r31, r31
     c4e:	59 1b       	sub	r21, r25
     c50:	99 f0       	breq	.+38     	; 0xc78 <__addsf3x+0x60>
     c52:	59 3f       	cpi	r21, 0xF9	; 249
     c54:	50 f4       	brcc	.+20     	; 0xc6a <__addsf3x+0x52>
     c56:	50 3e       	cpi	r21, 0xE0	; 224
     c58:	68 f1       	brcs	.+90     	; 0xcb4 <__addsf3x+0x9c>
     c5a:	1a 16       	cp	r1, r26
     c5c:	f0 40       	sbci	r31, 0x00	; 0
     c5e:	a2 2f       	mov	r26, r18
     c60:	23 2f       	mov	r18, r19
     c62:	34 2f       	mov	r19, r20
     c64:	44 27       	eor	r20, r20
     c66:	58 5f       	subi	r21, 0xF8	; 248
     c68:	f3 cf       	rjmp	.-26     	; 0xc50 <__addsf3x+0x38>
     c6a:	46 95       	lsr	r20
     c6c:	37 95       	ror	r19
     c6e:	27 95       	ror	r18
     c70:	a7 95       	ror	r26
     c72:	f0 40       	sbci	r31, 0x00	; 0
     c74:	53 95       	inc	r21
     c76:	c9 f7       	brne	.-14     	; 0xc6a <__addsf3x+0x52>
     c78:	7e f4       	brtc	.+30     	; 0xc98 <__addsf3x+0x80>
     c7a:	1f 16       	cp	r1, r31
     c7c:	ba 0b       	sbc	r27, r26
     c7e:	62 0b       	sbc	r22, r18
     c80:	73 0b       	sbc	r23, r19
     c82:	84 0b       	sbc	r24, r20
     c84:	ba f0       	brmi	.+46     	; 0xcb4 <__addsf3x+0x9c>
     c86:	91 50       	subi	r25, 0x01	; 1
     c88:	a1 f0       	breq	.+40     	; 0xcb2 <__addsf3x+0x9a>
     c8a:	ff 0f       	add	r31, r31
     c8c:	bb 1f       	adc	r27, r27
     c8e:	66 1f       	adc	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	88 1f       	adc	r24, r24
     c94:	c2 f7       	brpl	.-16     	; 0xc86 <__addsf3x+0x6e>
     c96:	0e c0       	rjmp	.+28     	; 0xcb4 <__addsf3x+0x9c>
     c98:	ba 0f       	add	r27, r26
     c9a:	62 1f       	adc	r22, r18
     c9c:	73 1f       	adc	r23, r19
     c9e:	84 1f       	adc	r24, r20
     ca0:	48 f4       	brcc	.+18     	; 0xcb4 <__addsf3x+0x9c>
     ca2:	87 95       	ror	r24
     ca4:	77 95       	ror	r23
     ca6:	67 95       	ror	r22
     ca8:	b7 95       	ror	r27
     caa:	f7 95       	ror	r31
     cac:	9e 3f       	cpi	r25, 0xFE	; 254
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <__addsf3x+0x9a>
     cb0:	b0 cf       	rjmp	.-160    	; 0xc12 <__addsf3+0x28>
     cb2:	93 95       	inc	r25
     cb4:	88 0f       	add	r24, r24
     cb6:	08 f0       	brcs	.+2      	; 0xcba <__addsf3x+0xa2>
     cb8:	99 27       	eor	r25, r25
     cba:	ee 0f       	add	r30, r30
     cbc:	97 95       	ror	r25
     cbe:	87 95       	ror	r24
     cc0:	08 95       	ret

00000cc2 <__cmpsf2>:
     cc2:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_cmp>
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__cmpsf2+0x8>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	08 95       	ret

00000ccc <__divsf3>:
     ccc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__divsf3x>
     cd0:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_round>
     cd4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscB>
     cd8:	58 f0       	brcs	.+22     	; 0xcf0 <__divsf3+0x24>
     cda:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscA>
     cde:	40 f0       	brcs	.+16     	; 0xcf0 <__divsf3+0x24>
     ce0:	29 f4       	brne	.+10     	; 0xcec <__divsf3+0x20>
     ce2:	5f 3f       	cpi	r21, 0xFF	; 255
     ce4:	29 f0       	breq	.+10     	; 0xcf0 <__divsf3+0x24>
     ce6:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
     cea:	51 11       	cpse	r21, r1
     cec:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__fp_szero>
     cf0:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_nan>

00000cf4 <__divsf3x>:
     cf4:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_split3>
     cf8:	68 f3       	brcs	.-38     	; 0xcd4 <__divsf3+0x8>

00000cfa <__divsf3_pse>:
     cfa:	99 23       	and	r25, r25
     cfc:	b1 f3       	breq	.-20     	; 0xcea <__divsf3+0x1e>
     cfe:	55 23       	and	r21, r21
     d00:	91 f3       	breq	.-28     	; 0xce6 <__divsf3+0x1a>
     d02:	95 1b       	sub	r25, r21
     d04:	55 0b       	sbc	r21, r21
     d06:	bb 27       	eor	r27, r27
     d08:	aa 27       	eor	r26, r26
     d0a:	62 17       	cp	r22, r18
     d0c:	73 07       	cpc	r23, r19
     d0e:	84 07       	cpc	r24, r20
     d10:	38 f0       	brcs	.+14     	; 0xd20 <__divsf3_pse+0x26>
     d12:	9f 5f       	subi	r25, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	22 0f       	add	r18, r18
     d18:	33 1f       	adc	r19, r19
     d1a:	44 1f       	adc	r20, r20
     d1c:	aa 1f       	adc	r26, r26
     d1e:	a9 f3       	breq	.-22     	; 0xd0a <__divsf3_pse+0x10>
     d20:	35 d0       	rcall	.+106    	; 0xd8c <__divsf3_pse+0x92>
     d22:	0e 2e       	mov	r0, r30
     d24:	3a f0       	brmi	.+14     	; 0xd34 <__divsf3_pse+0x3a>
     d26:	e0 e8       	ldi	r30, 0x80	; 128
     d28:	32 d0       	rcall	.+100    	; 0xd8e <__divsf3_pse+0x94>
     d2a:	91 50       	subi	r25, 0x01	; 1
     d2c:	50 40       	sbci	r21, 0x00	; 0
     d2e:	e6 95       	lsr	r30
     d30:	00 1c       	adc	r0, r0
     d32:	ca f7       	brpl	.-14     	; 0xd26 <__divsf3_pse+0x2c>
     d34:	2b d0       	rcall	.+86     	; 0xd8c <__divsf3_pse+0x92>
     d36:	fe 2f       	mov	r31, r30
     d38:	29 d0       	rcall	.+82     	; 0xd8c <__divsf3_pse+0x92>
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	bb 1f       	adc	r27, r27
     d42:	26 17       	cp	r18, r22
     d44:	37 07       	cpc	r19, r23
     d46:	48 07       	cpc	r20, r24
     d48:	ab 07       	cpc	r26, r27
     d4a:	b0 e8       	ldi	r27, 0x80	; 128
     d4c:	09 f0       	breq	.+2      	; 0xd50 <__divsf3_pse+0x56>
     d4e:	bb 0b       	sbc	r27, r27
     d50:	80 2d       	mov	r24, r0
     d52:	bf 01       	movw	r22, r30
     d54:	ff 27       	eor	r31, r31
     d56:	93 58       	subi	r25, 0x83	; 131
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	3a f0       	brmi	.+14     	; 0xd6a <__divsf3_pse+0x70>
     d5c:	9e 3f       	cpi	r25, 0xFE	; 254
     d5e:	51 05       	cpc	r21, r1
     d60:	78 f0       	brcs	.+30     	; 0xd80 <__divsf3_pse+0x86>
     d62:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
     d66:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__fp_szero>
     d6a:	5f 3f       	cpi	r21, 0xFF	; 255
     d6c:	e4 f3       	brlt	.-8      	; 0xd66 <__divsf3_pse+0x6c>
     d6e:	98 3e       	cpi	r25, 0xE8	; 232
     d70:	d4 f3       	brlt	.-12     	; 0xd66 <__divsf3_pse+0x6c>
     d72:	86 95       	lsr	r24
     d74:	77 95       	ror	r23
     d76:	67 95       	ror	r22
     d78:	b7 95       	ror	r27
     d7a:	f7 95       	ror	r31
     d7c:	9f 5f       	subi	r25, 0xFF	; 255
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <__divsf3_pse+0x78>
     d80:	88 0f       	add	r24, r24
     d82:	91 1d       	adc	r25, r1
     d84:	96 95       	lsr	r25
     d86:	87 95       	ror	r24
     d88:	97 f9       	bld	r25, 7
     d8a:	08 95       	ret
     d8c:	e1 e0       	ldi	r30, 0x01	; 1
     d8e:	66 0f       	add	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	bb 1f       	adc	r27, r27
     d96:	62 17       	cp	r22, r18
     d98:	73 07       	cpc	r23, r19
     d9a:	84 07       	cpc	r24, r20
     d9c:	ba 07       	cpc	r27, r26
     d9e:	20 f0       	brcs	.+8      	; 0xda8 <__divsf3_pse+0xae>
     da0:	62 1b       	sub	r22, r18
     da2:	73 0b       	sbc	r23, r19
     da4:	84 0b       	sbc	r24, r20
     da6:	ba 0b       	sbc	r27, r26
     da8:	ee 1f       	adc	r30, r30
     daa:	88 f7       	brcc	.-30     	; 0xd8e <__divsf3_pse+0x94>
     dac:	e0 95       	com	r30
     dae:	08 95       	ret

00000db0 <__fixsfsi>:
     db0:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fixunssfsi>
     db4:	68 94       	set
     db6:	b1 11       	cpse	r27, r1
     db8:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__fp_szero>
     dbc:	08 95       	ret

00000dbe <__fixunssfsi>:
     dbe:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_splitA>
     dc2:	88 f0       	brcs	.+34     	; 0xde6 <__fixunssfsi+0x28>
     dc4:	9f 57       	subi	r25, 0x7F	; 127
     dc6:	98 f0       	brcs	.+38     	; 0xdee <__fixunssfsi+0x30>
     dc8:	b9 2f       	mov	r27, r25
     dca:	99 27       	eor	r25, r25
     dcc:	b7 51       	subi	r27, 0x17	; 23
     dce:	b0 f0       	brcs	.+44     	; 0xdfc <__fixunssfsi+0x3e>
     dd0:	e1 f0       	breq	.+56     	; 0xe0a <__fixunssfsi+0x4c>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	88 1f       	adc	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	1a f0       	brmi	.+6      	; 0xde2 <__fixunssfsi+0x24>
     ddc:	ba 95       	dec	r27
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__fixunssfsi+0x14>
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <__fixunssfsi+0x4c>
     de2:	b1 30       	cpi	r27, 0x01	; 1
     de4:	91 f0       	breq	.+36     	; 0xe0a <__fixunssfsi+0x4c>
     de6:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_zero>
     dea:	b1 e0       	ldi	r27, 0x01	; 1
     dec:	08 95       	ret
     dee:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_zero>
     df2:	67 2f       	mov	r22, r23
     df4:	78 2f       	mov	r23, r24
     df6:	88 27       	eor	r24, r24
     df8:	b8 5f       	subi	r27, 0xF8	; 248
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__fixunssfsi+0x4c>
     dfc:	b9 3f       	cpi	r27, 0xF9	; 249
     dfe:	cc f3       	brlt	.-14     	; 0xdf2 <__fixunssfsi+0x34>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b3 95       	inc	r27
     e08:	d9 f7       	brne	.-10     	; 0xe00 <__fixunssfsi+0x42>
     e0a:	3e f4       	brtc	.+14     	; 0xe1a <__fixunssfsi+0x5c>
     e0c:	90 95       	com	r25
     e0e:	80 95       	com	r24
     e10:	70 95       	com	r23
     e12:	61 95       	neg	r22
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	08 95       	ret

00000e1c <__floatunsisf>:
     e1c:	e8 94       	clt
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <__floatsisf+0x12>

00000e20 <__floatsisf>:
     e20:	97 fb       	bst	r25, 7
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__floatsisf+0x12>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	99 23       	and	r25, r25
     e34:	a9 f0       	breq	.+42     	; 0xe60 <__floatsisf+0x40>
     e36:	f9 2f       	mov	r31, r25
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	bb 27       	eor	r27, r27
     e3c:	93 95       	inc	r25
     e3e:	f6 95       	lsr	r31
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f1 11       	cpse	r31, r1
     e4a:	f8 cf       	rjmp	.-16     	; 0xe3c <__floatsisf+0x1c>
     e4c:	fa f4       	brpl	.+62     	; 0xe8c <__floatsisf+0x6c>
     e4e:	bb 0f       	add	r27, r27
     e50:	11 f4       	brne	.+4      	; 0xe56 <__floatsisf+0x36>
     e52:	60 ff       	sbrs	r22, 0
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <__floatsisf+0x6c>
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <__floatsisf+0x6c>
     e60:	88 23       	and	r24, r24
     e62:	11 f0       	breq	.+4      	; 0xe68 <__floatsisf+0x48>
     e64:	96 e9       	ldi	r25, 0x96	; 150
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <__floatsisf+0x6a>
     e68:	77 23       	and	r23, r23
     e6a:	21 f0       	breq	.+8      	; 0xe74 <__floatsisf+0x54>
     e6c:	9e e8       	ldi	r25, 0x8E	; 142
     e6e:	87 2f       	mov	r24, r23
     e70:	76 2f       	mov	r23, r22
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__floatsisf+0x5e>
     e74:	66 23       	and	r22, r22
     e76:	71 f0       	breq	.+28     	; 0xe94 <__floatsisf+0x74>
     e78:	96 e8       	ldi	r25, 0x86	; 134
     e7a:	86 2f       	mov	r24, r22
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	2a f0       	brmi	.+10     	; 0xe8c <__floatsisf+0x6c>
     e82:	9a 95       	dec	r25
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	da f7       	brpl	.-10     	; 0xe82 <__floatsisf+0x62>
     e8c:	88 0f       	add	r24, r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	97 f9       	bld	r25, 7
     e94:	08 95       	ret

00000e96 <floor>:
     e96:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_trunc>
     e9a:	90 f0       	brcs	.+36     	; 0xec0 <floor+0x2a>
     e9c:	9f 37       	cpi	r25, 0x7F	; 127
     e9e:	48 f4       	brcc	.+18     	; 0xeb2 <floor+0x1c>
     ea0:	91 11       	cpse	r25, r1
     ea2:	16 f0       	brts	.+4      	; 0xea8 <floor+0x12>
     ea4:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__fp_szero>
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	80 e8       	ldi	r24, 0x80	; 128
     eae:	9f eb       	ldi	r25, 0xBF	; 191
     eb0:	08 95       	ret
     eb2:	26 f4       	brtc	.+8      	; 0xebc <floor+0x26>
     eb4:	1b 16       	cp	r1, r27
     eb6:	61 1d       	adc	r22, r1
     eb8:	71 1d       	adc	r23, r1
     eba:	81 1d       	adc	r24, r1
     ebc:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_mintl>
     ec0:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_mpack>

00000ec4 <__fp_cmp>:
     ec4:	99 0f       	add	r25, r25
     ec6:	00 08       	sbc	r0, r0
     ec8:	55 0f       	add	r21, r21
     eca:	aa 0b       	sbc	r26, r26
     ecc:	e0 e8       	ldi	r30, 0x80	; 128
     ece:	fe ef       	ldi	r31, 0xFE	; 254
     ed0:	16 16       	cp	r1, r22
     ed2:	17 06       	cpc	r1, r23
     ed4:	e8 07       	cpc	r30, r24
     ed6:	f9 07       	cpc	r31, r25
     ed8:	c0 f0       	brcs	.+48     	; 0xf0a <__fp_cmp+0x46>
     eda:	12 16       	cp	r1, r18
     edc:	13 06       	cpc	r1, r19
     ede:	e4 07       	cpc	r30, r20
     ee0:	f5 07       	cpc	r31, r21
     ee2:	98 f0       	brcs	.+38     	; 0xf0a <__fp_cmp+0x46>
     ee4:	62 1b       	sub	r22, r18
     ee6:	73 0b       	sbc	r23, r19
     ee8:	84 0b       	sbc	r24, r20
     eea:	95 0b       	sbc	r25, r21
     eec:	39 f4       	brne	.+14     	; 0xefc <__fp_cmp+0x38>
     eee:	0a 26       	eor	r0, r26
     ef0:	61 f0       	breq	.+24     	; 0xf0a <__fp_cmp+0x46>
     ef2:	23 2b       	or	r18, r19
     ef4:	24 2b       	or	r18, r20
     ef6:	25 2b       	or	r18, r21
     ef8:	21 f4       	brne	.+8      	; 0xf02 <__fp_cmp+0x3e>
     efa:	08 95       	ret
     efc:	0a 26       	eor	r0, r26
     efe:	09 f4       	brne	.+2      	; 0xf02 <__fp_cmp+0x3e>
     f00:	a1 40       	sbci	r26, 0x01	; 1
     f02:	a6 95       	lsr	r26
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	81 1d       	adc	r24, r1
     f08:	81 1d       	adc	r24, r1
     f0a:	08 95       	ret

00000f0c <__fp_inf>:
     f0c:	97 f9       	bld	r25, 7
     f0e:	9f 67       	ori	r25, 0x7F	; 127
     f10:	80 e8       	ldi	r24, 0x80	; 128
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	08 95       	ret

00000f18 <__fp_mintl>:
     f18:	88 23       	and	r24, r24
     f1a:	71 f4       	brne	.+28     	; 0xf38 <__fp_mintl+0x20>
     f1c:	77 23       	and	r23, r23
     f1e:	21 f0       	breq	.+8      	; 0xf28 <__fp_mintl+0x10>
     f20:	98 50       	subi	r25, 0x08	; 8
     f22:	87 2b       	or	r24, r23
     f24:	76 2f       	mov	r23, r22
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <__fp_mintl+0x1e>
     f28:	66 23       	and	r22, r22
     f2a:	11 f4       	brne	.+4      	; 0xf30 <__fp_mintl+0x18>
     f2c:	99 27       	eor	r25, r25
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <__fp_mintl+0x32>
     f30:	90 51       	subi	r25, 0x10	; 16
     f32:	86 2b       	or	r24, r22
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	2a f0       	brmi	.+10     	; 0xf44 <__fp_mintl+0x2c>
     f3a:	9a 95       	dec	r25
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	da f7       	brpl	.-10     	; 0xf3a <__fp_mintl+0x22>
     f44:	88 0f       	add	r24, r24
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret

00000f4e <__fp_mpack>:
     f4e:	9f 3f       	cpi	r25, 0xFF	; 255
     f50:	31 f0       	breq	.+12     	; 0xf5e <__fp_mpack_finite+0xc>

00000f52 <__fp_mpack_finite>:
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	20 f4       	brcc	.+8      	; 0xf5e <__fp_mpack_finite+0xc>
     f56:	87 95       	ror	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b7 95       	ror	r27
     f5e:	88 0f       	add	r24, r24
     f60:	91 1d       	adc	r25, r1
     f62:	96 95       	lsr	r25
     f64:	87 95       	ror	r24
     f66:	97 f9       	bld	r25, 7
     f68:	08 95       	ret

00000f6a <__fp_nan>:
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	80 ec       	ldi	r24, 0xC0	; 192
     f6e:	08 95       	ret

00000f70 <__fp_pscA>:
     f70:	00 24       	eor	r0, r0
     f72:	0a 94       	dec	r0
     f74:	16 16       	cp	r1, r22
     f76:	17 06       	cpc	r1, r23
     f78:	18 06       	cpc	r1, r24
     f7a:	09 06       	cpc	r0, r25
     f7c:	08 95       	ret

00000f7e <__fp_pscB>:
     f7e:	00 24       	eor	r0, r0
     f80:	0a 94       	dec	r0
     f82:	12 16       	cp	r1, r18
     f84:	13 06       	cpc	r1, r19
     f86:	14 06       	cpc	r1, r20
     f88:	05 06       	cpc	r0, r21
     f8a:	08 95       	ret

00000f8c <__fp_round>:
     f8c:	09 2e       	mov	r0, r25
     f8e:	03 94       	inc	r0
     f90:	00 0c       	add	r0, r0
     f92:	11 f4       	brne	.+4      	; 0xf98 <__fp_round+0xc>
     f94:	88 23       	and	r24, r24
     f96:	52 f0       	brmi	.+20     	; 0xfac <__fp_round+0x20>
     f98:	bb 0f       	add	r27, r27
     f9a:	40 f4       	brcc	.+16     	; 0xfac <__fp_round+0x20>
     f9c:	bf 2b       	or	r27, r31
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__fp_round+0x18>
     fa0:	60 ff       	sbrs	r22, 0
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <__fp_round+0x20>
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	08 95       	ret

00000fae <__fp_split3>:
     fae:	57 fd       	sbrc	r21, 7
     fb0:	90 58       	subi	r25, 0x80	; 128
     fb2:	44 0f       	add	r20, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	59 f0       	breq	.+22     	; 0xfce <__fp_splitA+0x10>
     fb8:	5f 3f       	cpi	r21, 0xFF	; 255
     fba:	71 f0       	breq	.+28     	; 0xfd8 <__fp_splitA+0x1a>
     fbc:	47 95       	ror	r20

00000fbe <__fp_splitA>:
     fbe:	88 0f       	add	r24, r24
     fc0:	97 fb       	bst	r25, 7
     fc2:	99 1f       	adc	r25, r25
     fc4:	61 f0       	breq	.+24     	; 0xfde <__fp_splitA+0x20>
     fc6:	9f 3f       	cpi	r25, 0xFF	; 255
     fc8:	79 f0       	breq	.+30     	; 0xfe8 <__fp_splitA+0x2a>
     fca:	87 95       	ror	r24
     fcc:	08 95       	ret
     fce:	12 16       	cp	r1, r18
     fd0:	13 06       	cpc	r1, r19
     fd2:	14 06       	cpc	r1, r20
     fd4:	55 1f       	adc	r21, r21
     fd6:	f2 cf       	rjmp	.-28     	; 0xfbc <__fp_split3+0xe>
     fd8:	46 95       	lsr	r20
     fda:	f1 df       	rcall	.-30     	; 0xfbe <__fp_splitA>
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <__fp_splitA+0x30>
     fde:	16 16       	cp	r1, r22
     fe0:	17 06       	cpc	r1, r23
     fe2:	18 06       	cpc	r1, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	f1 cf       	rjmp	.-30     	; 0xfca <__fp_splitA+0xc>
     fe8:	86 95       	lsr	r24
     fea:	71 05       	cpc	r23, r1
     fec:	61 05       	cpc	r22, r1
     fee:	08 94       	sec
     ff0:	08 95       	ret

00000ff2 <__fp_trunc>:
     ff2:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_splitA>
     ff6:	a0 f0       	brcs	.+40     	; 0x1020 <__fp_trunc+0x2e>
     ff8:	be e7       	ldi	r27, 0x7E	; 126
     ffa:	b9 17       	cp	r27, r25
     ffc:	88 f4       	brcc	.+34     	; 0x1020 <__fp_trunc+0x2e>
     ffe:	bb 27       	eor	r27, r27
    1000:	9f 38       	cpi	r25, 0x8F	; 143
    1002:	60 f4       	brcc	.+24     	; 0x101c <__fp_trunc+0x2a>
    1004:	16 16       	cp	r1, r22
    1006:	b1 1d       	adc	r27, r1
    1008:	67 2f       	mov	r22, r23
    100a:	78 2f       	mov	r23, r24
    100c:	88 27       	eor	r24, r24
    100e:	98 5f       	subi	r25, 0xF8	; 248
    1010:	f7 cf       	rjmp	.-18     	; 0x1000 <__fp_trunc+0xe>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b1 1d       	adc	r27, r1
    101a:	93 95       	inc	r25
    101c:	96 39       	cpi	r25, 0x96	; 150
    101e:	c8 f3       	brcs	.-14     	; 0x1012 <__fp_trunc+0x20>
    1020:	08 95       	ret

00001022 <__fp_zero>:
    1022:	e8 94       	clt

00001024 <__fp_szero>:
    1024:	bb 27       	eor	r27, r27
    1026:	66 27       	eor	r22, r22
    1028:	77 27       	eor	r23, r23
    102a:	cb 01       	movw	r24, r22
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret

00001030 <__gesf2>:
    1030:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_cmp>
    1034:	08 f4       	brcc	.+2      	; 0x1038 <__gesf2+0x8>
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	08 95       	ret

0000103a <__mulsf3>:
    103a:	0e 94 30 08 	call	0x1060	; 0x1060 <__mulsf3x>
    103e:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_round>
    1042:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscA>
    1046:	38 f0       	brcs	.+14     	; 0x1056 <__mulsf3+0x1c>
    1048:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscB>
    104c:	20 f0       	brcs	.+8      	; 0x1056 <__mulsf3+0x1c>
    104e:	95 23       	and	r25, r21
    1050:	11 f0       	breq	.+4      	; 0x1056 <__mulsf3+0x1c>
    1052:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
    1056:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_nan>
    105a:	11 24       	eor	r1, r1
    105c:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__fp_szero>

00001060 <__mulsf3x>:
    1060:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_split3>
    1064:	70 f3       	brcs	.-36     	; 0x1042 <__mulsf3+0x8>

00001066 <__mulsf3_pse>:
    1066:	95 9f       	mul	r25, r21
    1068:	c1 f3       	breq	.-16     	; 0x105a <__mulsf3+0x20>
    106a:	95 0f       	add	r25, r21
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	55 1f       	adc	r21, r21
    1070:	62 9f       	mul	r22, r18
    1072:	f0 01       	movw	r30, r0
    1074:	72 9f       	mul	r23, r18
    1076:	bb 27       	eor	r27, r27
    1078:	f0 0d       	add	r31, r0
    107a:	b1 1d       	adc	r27, r1
    107c:	63 9f       	mul	r22, r19
    107e:	aa 27       	eor	r26, r26
    1080:	f0 0d       	add	r31, r0
    1082:	b1 1d       	adc	r27, r1
    1084:	aa 1f       	adc	r26, r26
    1086:	64 9f       	mul	r22, r20
    1088:	66 27       	eor	r22, r22
    108a:	b0 0d       	add	r27, r0
    108c:	a1 1d       	adc	r26, r1
    108e:	66 1f       	adc	r22, r22
    1090:	82 9f       	mul	r24, r18
    1092:	22 27       	eor	r18, r18
    1094:	b0 0d       	add	r27, r0
    1096:	a1 1d       	adc	r26, r1
    1098:	62 1f       	adc	r22, r18
    109a:	73 9f       	mul	r23, r19
    109c:	b0 0d       	add	r27, r0
    109e:	a1 1d       	adc	r26, r1
    10a0:	62 1f       	adc	r22, r18
    10a2:	83 9f       	mul	r24, r19
    10a4:	a0 0d       	add	r26, r0
    10a6:	61 1d       	adc	r22, r1
    10a8:	22 1f       	adc	r18, r18
    10aa:	74 9f       	mul	r23, r20
    10ac:	33 27       	eor	r19, r19
    10ae:	a0 0d       	add	r26, r0
    10b0:	61 1d       	adc	r22, r1
    10b2:	23 1f       	adc	r18, r19
    10b4:	84 9f       	mul	r24, r20
    10b6:	60 0d       	add	r22, r0
    10b8:	21 1d       	adc	r18, r1
    10ba:	82 2f       	mov	r24, r18
    10bc:	76 2f       	mov	r23, r22
    10be:	6a 2f       	mov	r22, r26
    10c0:	11 24       	eor	r1, r1
    10c2:	9f 57       	subi	r25, 0x7F	; 127
    10c4:	50 40       	sbci	r21, 0x00	; 0
    10c6:	9a f0       	brmi	.+38     	; 0x10ee <__mulsf3_pse+0x88>
    10c8:	f1 f0       	breq	.+60     	; 0x1106 <__mulsf3_pse+0xa0>
    10ca:	88 23       	and	r24, r24
    10cc:	4a f0       	brmi	.+18     	; 0x10e0 <__mulsf3_pse+0x7a>
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	bb 1f       	adc	r27, r27
    10d4:	66 1f       	adc	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	88 1f       	adc	r24, r24
    10da:	91 50       	subi	r25, 0x01	; 1
    10dc:	50 40       	sbci	r21, 0x00	; 0
    10de:	a9 f7       	brne	.-22     	; 0x10ca <__mulsf3_pse+0x64>
    10e0:	9e 3f       	cpi	r25, 0xFE	; 254
    10e2:	51 05       	cpc	r21, r1
    10e4:	80 f0       	brcs	.+32     	; 0x1106 <__mulsf3_pse+0xa0>
    10e6:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_inf>
    10ea:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__fp_szero>
    10ee:	5f 3f       	cpi	r21, 0xFF	; 255
    10f0:	e4 f3       	brlt	.-8      	; 0x10ea <__mulsf3_pse+0x84>
    10f2:	98 3e       	cpi	r25, 0xE8	; 232
    10f4:	d4 f3       	brlt	.-12     	; 0x10ea <__mulsf3_pse+0x84>
    10f6:	86 95       	lsr	r24
    10f8:	77 95       	ror	r23
    10fa:	67 95       	ror	r22
    10fc:	b7 95       	ror	r27
    10fe:	f7 95       	ror	r31
    1100:	e7 95       	ror	r30
    1102:	9f 5f       	subi	r25, 0xFF	; 255
    1104:	c1 f7       	brne	.-16     	; 0x10f6 <__mulsf3_pse+0x90>
    1106:	fe 2b       	or	r31, r30
    1108:	88 0f       	add	r24, r24
    110a:	91 1d       	adc	r25, r1
    110c:	96 95       	lsr	r25
    110e:	87 95       	ror	r24
    1110:	97 f9       	bld	r25, 7
    1112:	08 95       	ret

00001114 <__divmodhi4>:
    1114:	97 fb       	bst	r25, 7
    1116:	07 2e       	mov	r0, r23
    1118:	16 f4       	brtc	.+4      	; 0x111e <__divmodhi4+0xa>
    111a:	00 94       	com	r0
    111c:	07 d0       	rcall	.+14     	; 0x112c <__divmodhi4_neg1>
    111e:	77 fd       	sbrc	r23, 7
    1120:	09 d0       	rcall	.+18     	; 0x1134 <__divmodhi4_neg2>
    1122:	0e 94 ad 08 	call	0x115a	; 0x115a <__udivmodhi4>
    1126:	07 fc       	sbrc	r0, 7
    1128:	05 d0       	rcall	.+10     	; 0x1134 <__divmodhi4_neg2>
    112a:	3e f4       	brtc	.+14     	; 0x113a <__divmodhi4_exit>

0000112c <__divmodhi4_neg1>:
    112c:	90 95       	com	r25
    112e:	81 95       	neg	r24
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	08 95       	ret

00001134 <__divmodhi4_neg2>:
    1134:	70 95       	com	r23
    1136:	61 95       	neg	r22
    1138:	7f 4f       	sbci	r23, 0xFF	; 255

0000113a <__divmodhi4_exit>:
    113a:	08 95       	ret

0000113c <__umulhisi3>:
    113c:	a2 9f       	mul	r26, r18
    113e:	b0 01       	movw	r22, r0
    1140:	b3 9f       	mul	r27, r19
    1142:	c0 01       	movw	r24, r0
    1144:	a3 9f       	mul	r26, r19
    1146:	70 0d       	add	r23, r0
    1148:	81 1d       	adc	r24, r1
    114a:	11 24       	eor	r1, r1
    114c:	91 1d       	adc	r25, r1
    114e:	b2 9f       	mul	r27, r18
    1150:	70 0d       	add	r23, r0
    1152:	81 1d       	adc	r24, r1
    1154:	11 24       	eor	r1, r1
    1156:	91 1d       	adc	r25, r1
    1158:	08 95       	ret

0000115a <__udivmodhi4>:
    115a:	aa 1b       	sub	r26, r26
    115c:	bb 1b       	sub	r27, r27
    115e:	51 e1       	ldi	r21, 0x11	; 17
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <__udivmodhi4_ep>

00001162 <__udivmodhi4_loop>:
    1162:	aa 1f       	adc	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	a6 17       	cp	r26, r22
    1168:	b7 07       	cpc	r27, r23
    116a:	10 f0       	brcs	.+4      	; 0x1170 <__udivmodhi4_ep>
    116c:	a6 1b       	sub	r26, r22
    116e:	b7 0b       	sbc	r27, r23

00001170 <__udivmodhi4_ep>:
    1170:	88 1f       	adc	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	5a 95       	dec	r21
    1176:	a9 f7       	brne	.-22     	; 0x1162 <__udivmodhi4_loop>
    1178:	80 95       	com	r24
    117a:	90 95       	com	r25
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	08 95       	ret

00001182 <_exit>:
    1182:	f8 94       	cli

00001184 <__stop_program>:
    1184:	ff cf       	rjmp	.-2      	; 0x1184 <__stop_program>
